name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  # Backend Testing
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./server
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './server/package-lock.json'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests with coverage
      run: npm test -- --run
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        directory: ./server/coverage
        flags: backend
        name: backend-coverage
        
  # Frontend Testing  
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./client
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './client/package-lock.json'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm test -- --run
      
    - name: Build frontend
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: client-build
        path: ./client/dist/
        retention-days: 30

  # Code Quality Checks
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Cache root node_modules
      uses: actions/cache@v4
      id: cache-root-modules
      with:
        path: ./node_modules
        key: ${{ runner.os }}-node-root-${{ hashFiles('./package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-root-

    - name: Install root dependencies
      if: steps.cache-root-modules.outputs.cache-hit != 'true'
      run: npm ci
        
    - name: Cache server node_modules
      uses: actions/cache@v4
      id: cache-server-modules
      with:
        path: ./server/node_modules
        key: ${{ runner.os }}-node-server-${{ hashFiles('./server/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-server-

    - name: Install backend dependencies
      if: steps.cache-server-modules.outputs.cache-hit != 'true'
      run: cd server && npm ci
      
    - name: Cache client node_modules
      uses: actions/cache@v4
      id: cache-client-modules
      with:
        path: ./client/node_modules
        key: ${{ runner.os }}-node-client-${{ hashFiles('./client/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-client-

    - name: Install frontend dependencies
      if: steps.cache-client-modules.outputs.cache-hit != 'true'
      run: cd client && npm ci
      
    - name: Run full lint check
      run: npm run lint
      
    - name: Run full build check
      run: npm run build

  # Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Cache server node_modules
      uses: actions/cache@v4
      id: cache-server-modules
      with:
        path: ./server/node_modules
        key: ${{ runner.os }}-node-server-${{ hashFiles('./server/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-server-

    - name: Install server dependencies for audit
      if: steps.cache-server-modules.outputs.cache-hit != 'true'
      run: cd server && npm ci

    - name: Audit backend dependencies
      run: cd server && npm audit --audit-level=moderate
      continue-on-error: true
      
    - name: Cache client node_modules
      uses: actions/cache@v4
      id: cache-client-modules
      with:
        path: ./client/node_modules
        key: ${{ runner.os }}-node-client-${{ hashFiles('./client/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-client-

    - name: Install client dependencies for audit
      if: steps.cache-client-modules.outputs.cache-hit != 'true'
      run: cd client && npm ci

    - name: Audit frontend dependencies
      run: cd client && npm audit --audit-level=moderate
      continue-on-error: true

  # Packaging Test (runs on all platforms)
  packaging-test:
    name: Packaging Test
    runs-on: ${{ matrix.os }}
    needs: [backend-test, frontend-test, lint-and-typecheck]
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Cache root node_modules
      uses: actions/cache@v4
      id: cache-root-modules
      with:
        path: ./node_modules
        key: ${{ runner.os }}-node-root-${{ hashFiles('./package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-root-

    - name: Install root dependencies
      if: steps.cache-root-modules.outputs.cache-hit != 'true'
      run: npm ci
        
    - name: Cache server node_modules
      uses: actions/cache@v4
      id: cache-server-modules
      with:
        path: ./server/node_modules
        key: ${{ runner.os }}-node-server-${{ hashFiles('./server/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-server-

    - name: Install backend dependencies
      if: steps.cache-server-modules.outputs.cache-hit != 'true'
      run: cd server && npm ci
      
    - name: Cache client node_modules
      uses: actions/cache@v4
      id: cache-client-modules
      with:
        path: ./client/node_modules
        key: ${{ runner.os }}-node-client-${{ hashFiles('./client/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-client-

    - name: Install frontend dependencies
      if: steps.cache-client-modules.outputs.cache-hit != 'true'
      run: cd client && npm ci
      
    - name: Run packaging test (Linux)
      if: runner.os == 'Linux'
      run: xvfb-run --auto-servernum --server-args="-screen 0 1280x960x24" npm run test:packaging
      
    - name: Run packaging test (Windows & macOS)
      if: runner.os != 'Linux'
      run: npm run test:packaging

  # Build Electron Release (only on main branch)
  build-electron:
    name: Build Electron App
    runs-on: ${{ matrix.os }}
    needs: [backend-test, frontend-test, lint-and-typecheck]
    if: github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: win32
          - os: macos-latest
            platform: darwin
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Cache root node_modules
      uses: actions/cache@v4
      id: cache-root-modules
      with:
        path: ./node_modules
        key: ${{ runner.os }}-node-root-${{ hashFiles('./package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-root-

    - name: Install root dependencies
      if: steps.cache-root-modules.outputs.cache-hit != 'true'
      run: npm ci
        
    - name: Cache server node_modules
      uses: actions/cache@v4
      id: cache-server-modules
      with:
        path: ./server/node_modules
        key: ${{ runner.os }}-node-server-${{ hashFiles('./server/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-server-

    - name: Install backend dependencies
      if: steps.cache-server-modules.outputs.cache-hit != 'true'
      run: cd server && npm ci
      
    - name: Cache client node_modules
      uses: actions/cache@v4
      id: cache-client-modules
      with:
        path: ./client/node_modules
        key: ${{ runner.os }}-node-client-${{ hashFiles('./client/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-client-

    - name: Install frontend dependencies
      if: steps.cache-client-modules.outputs.cache-hit != 'true'
      run: cd client && npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Build Electron app
      run: npm run dist
      env:
        # Code signing environment variables (if available)
        CSC_LINK: ${{ secrets.CSC_LINK }}
        CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
        WIN_CSC_LINK: ${{ secrets.WIN_CSC_LINK }}
        WIN_CSC_KEY_PASSWORD: ${{ secrets.WIN_CSC_KEY_PASSWORD }}
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: electron-${{ matrix.platform }}
        path: |
          dist-electron/*.dmg
          dist-electron/*.zip
          dist-electron/*.exe
          dist-electron/*.msi
          dist-electron/*.AppImage
          dist-electron/*.deb
          dist-electron/*.rpm
        retention-days: 90

  # Publish Latest Build (on main branch)
  publish-latest:
    name: Publish Latest Build
    runs-on: ubuntu-latest
    needs: [build-electron]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
      
    - name: Get short SHA
      id: get_sha
      run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Update latest tag
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -f latest
        git push -f origin latest
        
    - name: Create Latest Release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: latest
        name: Latest Alpha Build (main)
        body: |
          This is the latest automated development build from the main branch.
          
          **Commit:** `${{ github.sha }}`
          
          **Warning:** This is an unstable build and may contain bugs.
        prerelease: false
        files: |
          ./artifacts/**/*

  # Deploy Documentation (on main branch)
  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './client/package-lock.json'
        
    - name: Install frontend dependencies
      run: cd client && npm ci
      
    - name: Build documentation site
      run: cd client && npm run build
      
    - name: Deploy to Cloudflare Pages
      run: |
        echo "Documentation deployment would happen here"
        # In a real setup, this would deploy to Cloudflare Pages
        # wrangler pages publish ./client/dist --project-name=kj-nomad-docs
