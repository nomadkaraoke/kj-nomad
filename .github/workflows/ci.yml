name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  # Backend Testing
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./server
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './server/package-lock.json'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests with coverage
      run: npm test -- --run
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        directory: ./server/coverage
        flags: backend
        name: backend-coverage
        
  # Frontend Testing  
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./client
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './client/package-lock.json'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm test -- --run
      
    - name: Build frontend
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: client-build
        path: ./client/dist/
        retention-days: 30

  # Code Quality Checks
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install root dependencies
      run: npm ci
        
    - name: Install backend dependencies
      run: cd server && npm ci
      
    - name: Install frontend dependencies
      run: cd client && npm ci
      
    - name: Run full lint check
      run: npm run lint
      
    - name: Run full build check
      run: npm run build

  # Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Audit backend dependencies
      run: cd server && npm audit --audit-level=moderate
      continue-on-error: true
      
    - name: Audit frontend dependencies
      run: cd client && npm audit --audit-level=moderate
      continue-on-error: true

  # Packaging Test (runs on all platforms)
  packaging-test:
    name: Packaging Test
    runs-on: ${{ matrix.os }}
    needs: [backend-test, frontend-test, lint-and-typecheck]
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install root dependencies
      run: npm ci
        
    - name: Install backend dependencies
      run: cd server && npm ci
      
    - name: Install frontend dependencies
      run: cd client && npm ci
      
    - name: Run packaging test
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          xvfb-run --auto-servernum --server-args="-screen 0 1280x960x24" npm run test:packaging
        else
          npm run test:packaging
        fi

  # Build Electron Release (only on main branch or tags)
  build-electron:
    name: Build Electron App
    runs-on: ${{ matrix.os }}
    needs: [backend-test, frontend-test, lint-and-typecheck]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: win32
          - os: macos-latest
            platform: darwin
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install root dependencies
      run: npm ci
        
    - name: Install backend dependencies
      run: cd server && npm ci
      
    - name: Install frontend dependencies
      run: cd client && npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Build Electron app
      run: npm run dist
      env:
        # Code signing environment variables (if available)
        CSC_LINK: ${{ secrets.CSC_LINK }}
        CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
        # Windows code signing
        WIN_CSC_LINK: ${{ secrets.WIN_CSC_LINK }}
        WIN_CSC_KEY_PASSWORD: ${{ secrets.WIN_CSC_KEY_PASSWORD }}
        # macOS notarization
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: electron-${{ matrix.platform }}
        path: |
          dist-electron/*.dmg
          dist-electron/*.zip
          dist-electron/*.exe
          dist-electron/*.msi
          dist-electron/*.AppImage
          dist-electron/*.deb
          dist-electron/*.rpm
        retention-days: 90

  # Create GitHub Release (only on version tags)
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-electron]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
      
    - name: Get version from tag
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        name: KJ-Nomad v${{ steps.get_version.outputs.version }}
        body: |
          ## ðŸŽ¤ KJ-Nomad v${{ steps.get_version.outputs.version }}
          
          Professional karaoke hosting software with multi-screen synchronization and mobile control.
          
          ### ðŸš€ Quick Start
          1. Download the appropriate installer for your operating system
          2. Install and launch KJ-Nomad
          3. Follow the setup wizard to configure your media library
          4. Connect player screens to the displayed network address
          5. Start hosting professional karaoke shows!
          
          ### ðŸŽ¯ Features
          - **Offline-First Operation** - Works without internet connection
          - **Multi-Screen Sync** - Perfect video synchronization across unlimited screens
          - **Mobile KJ Control** - Manage everything from your phone
          - **Professional UI** - Beautiful, responsive interface for all devices
          - **Paper Workflow** - Optimized for traditional paper slip requests
          - **YouTube Integration** - Download and cache videos on-demand (online mode)
          
          See the [Documentation](https://kj.nomadkaraoke.com) for full setup instructions.
        draft: false
        prerelease: false
        files: |
          ./artifacts/**/*

  # Update Latest Release Links (for consistent download URLs)
  update-latest-links:
    name: Update Latest Release Links
    runs-on: ubuntu-latest
    needs: [create-release]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get version from tag
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
    - name: Update Cloudflare Pages with latest download links
      run: |
        # Update the landing page with latest download links
        # This will be used by kj.nomadkaraoke.com to show consistent download URLs
        cat > ./cloudflare/pages/landing/latest-release.json << EOF
        {
          "version": "${{ steps.get_version.outputs.version }}",
          "tag": "${{ github.ref }}",
          "downloads": {
            "windows_installer": "https://github.com/nomadkaraoke/kj-nomad/releases/download/${{ github.ref }}/KJ-Nomad-Setup-${{ steps.get_version.outputs.version }}.exe",
            "windows_portable": "https://github.com/nomadkaraoke/kj-nomad/releases/download/${{ github.ref }}/KJ-Nomad-${{ steps.get_version.outputs.version }}-win.zip",
            "macos_intel": "https://github.com/nomadkaraoke/kj-nomad/releases/download/${{ github.ref }}/KJ-Nomad-${{ steps.get_version.outputs.version }}.dmg",
            "macos_apple_silicon": "https://github.com/nomadkaraoke/kj-nomad/releases/download/${{ github.ref }}/KJ-Nomad-${{ steps.get_version.outputs.version }}-arm64.dmg",
            "linux_appimage": "https://github.com/nomadkaraoke/kj-nomad/releases/download/${{ github.ref }}/KJ-Nomad-${{ steps.get_version.outputs.version }}.AppImage",
            "linux_deb": "https://github.com/nomadkaraoke/kj-nomad/releases/download/${{ github.ref }}/kj-nomad_${{ steps.get_version.outputs.version }}_amd64.deb"
          },
          "updated": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
        }
        EOF
        
    - name: Deploy updated landing page
      run: |
        # Deploy to Cloudflare Pages (this would typically use wrangler)
        echo "Latest release info updated for landing page integration"
        # In a real deployment, this would push to Cloudflare Pages
        # wrangler pages publish ./cloudflare/pages/landing --project-name=kj-nomad-landing

  # Deploy Documentation (on main branch)
  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install frontend dependencies
      run: cd client && npm ci
      
    - name: Build documentation site
      run: cd client && npm run build
      
    - name: Deploy to Cloudflare Pages
      run: |
        echo "Documentation deployment would happen here"
        # In a real setup, this would deploy to Cloudflare Pages
        # wrangler pages publish ./client/dist --project-name=kj-nomad-docs
